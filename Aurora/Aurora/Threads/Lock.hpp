#ifndef LOCK_HPP
#define LOCK_HPP

namespace Aurora
{
	namespace Threads
	{
		class Mutex;

		////////////////////////////////////////////////////////////
		/// \brief Automatic wrapper for locking and unlocking mutexes
		///
		////////////////////////////////////////////////////////////
		class  Lock
		{
		public :

			////////////////////////////////////////////////////////////
			/// \brief Construct the lock with a target mutex
			///
			/// The mutex passed to sf::Lock is automatically locked.
			///
			/// \param mutex Mutex to lock
			///
			////////////////////////////////////////////////////////////
			explicit Lock(Mutex& mutex);

			////////////////////////////////////////////////////////////
			/// \brief Destructor
			///
			/// The destructor of sf::Lock automatically unlocks its mutex.
			///
			////////////////////////////////////////////////////////////
			~Lock();

		private :

			////////////////////////////////////////////////////////////
			// Member data
			////////////////////////////////////////////////////////////
			Mutex& m_mutex; ///< Mutex to lock / unlock
		};

	} // namespace sf
}


#endif