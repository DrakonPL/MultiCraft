#ifndef MUTEX_HPP
#define MUTEX_HPP

namespace Aurora
{
	namespace Threads
	{
		namespace priv
		{
			class MutexImpl;
		}

		class Mutex
		{
		public :

			////////////////////////////////////////////////////////////
			/// \brief Default constructor
			///
			////////////////////////////////////////////////////////////
			Mutex();

			////////////////////////////////////////////////////////////
			/// \brief Destructor
			///
			////////////////////////////////////////////////////////////
			~Mutex();

			////////////////////////////////////////////////////////////
			/// \brief Lock the mutex
			///
			/// If the mutex is already locked in another thread,
			/// this call will block the execution until the mutex
			/// is released.
			///
			/// \see unlock
			///
			////////////////////////////////////////////////////////////
			void lock();

			////////////////////////////////////////////////////////////
			/// \brief Unlock the mutex
			///
			/// \see lock
			///
			////////////////////////////////////////////////////////////
			void unlock();

		private :

			////////////////////////////////////////////////////////////
			// Member data
			////////////////////////////////////////////////////////////
			priv::MutexImpl* m_mutexImpl; ///< OS-specific implementation
		};

	} // namespace sf
}


#endif